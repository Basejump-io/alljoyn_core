# Copyright 2010 - 2012, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 
import os, zipfile
Import('env')

vsix_env = env.Clone();


# find the newest .NetFramework so we can use the 32 bit msbbuild.exe
def FindNewestDotNet( ):
    import re, winreg

    # check the environment for COMSPEC and if it contains SysWOW64, look for the 32bit version of MSBuild.exe
    if re.match('SysWOW64', os.environ['COMSPEC'] ):
        frameworkKey = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework',0, winreg.KEY_READ)
    else:
        frameworkKey = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\.NETFramework',0, winreg.KEY_READ)
    installRoot = winreg.QueryValueEx(frameworkKey, 'InstallRoot')

    # there can be multiple .Net framework versions installed, enumerate the registry keys to find the latest
    Version = ''
    try:
        index = 0
        while True:
            subkeyName = winreg.EnumKey(frameworkKey, index)
            if re.match(r'^v', subkeyName):
                if os.path.exists(installRoot[0] + subkeyName):
                    if (subkeyName > Version):
                        Version = subkeyName  #take the latest Framework.
            index += 1
    except:
        pass
    winreg.CloseKey(frameworkKey)
    return installRoot[0] + Version



# extract certain files from a zip file: 
def extract_binaries_from( target, source, env):
    with zipfile.ZipFile(source[0].abspath , 'r') as z:
        for f in z.namelist(): 
            if f.endswith(tuple(['.dll', '.winmd', '.xml'])): 
                print f
                z.extract(f, target[0].abspath)
    return None

# create a Builder that will run a python function to extract pieces from the sdk
unzip_bld = Builder(action = extract_binaries_from)
vsix_env.Append(BUILDERS = {'ExtractBinaries' : unzip_bld } )


if vsix_env['OS'] == 'win8':

    # work around 64/32 bit oddness with SCons/Python and MSBuild
    NewestDotNetFramework = FindNewestDotNet()

    # this magic setting is needed for MSBuild to create a complete .vsix file
    vsix_env['ENV']['SystemDrive'] = os.environ['SystemDrive']


    # always build the vsix
    makevsix = vsix_env.Command('AllJoynSDKVSIX\\AllJoynSDKVSIX\\bin\\Release\\AllJoynSDK.vsix', 
                            None,
                            [
                            ''.join([
                                    NewestDotNetFramework + '\\',
                                    'msbuild.exe alljoyn_core\\win8_sdk\\AllJoynSDKVSIX\\AllJoynSDKVSIX.sln /t:Rebuild /p:',
                                    'Configuration=Release;Platform="Any CPU"'
                                    ]),
                            ]
                            )

    # clean out old binaries 
    clean_bin = vsix_env.Command('cleanbin.out', None, [Delete(vsix_env.Dir('./AllJoynSDKVSIX/AllJoynSDKVSIX/bin'), must_exist=0)] )
    clean_obj = vsix_env.Command('cleanobj.out', None, [Delete(vsix_env.Dir('./AllJoynSDKVSIX/AllJoynSDKVSIX/obj'), must_exist=0)] )
    clean_extracted = vsix_env.Command('cleanup.out', None, [Delete(vsix_env.Dir('./ExtractedTemp'), must_exist=0)] )
    vsix_env.Depends(makevsix, clean_bin)
    vsix_env.Depends(makevsix, clean_obj)

    # extract local copies of sdk binaries from the release share
    unzipped_bin = vsix_env.ExtractBinaries(['ExtractedTemp/alljoyn-3.0.1-win8x64-sdk'], ['\\\\chips\\alljoyn\\Releases\\alljoyn-3.0.1\\alljoyn-3.0.1-win8x64-sdk.zip'])
    vsix_env.Depends(unzipped_bin, clean_extracted)
    vsix_env.Depends(makevsix, unzipped_bin)

    unzipped_bin = vsix_env.ExtractBinaries(['ExtractedTemp/alljoyn-3.0.1-win8x86-sdk'], ['\\\\chips\\alljoyn\\Releases\\alljoyn-3.0.1\\alljoyn-3.0.1-win8x86-sdk.zip'])
    vsix_env.Depends(unzipped_bin, clean_extracted)
    vsix_env.Depends(makevsix, unzipped_bin)

    unzipped_bin = vsix_env.ExtractBinaries(['ExtractedTemp/alljoyn-3.0.1-winrt-sdk'], ['\\\\chips\\alljoyn\\Releases\\alljoyn-3.0.1\\alljoyn-3.0.1-winrt-sdk.zip'])
    vsix_env.Depends(unzipped_bin, clean_extracted)
    vsix_env.Depends(makevsix, unzipped_bin)


    #
    # Copy the .winmd, .xml , and .dll into the right location for the VSIX solution to package everything

    # x64
    if os.path.exists('./ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-dbg/bin/AllJoyn.dll'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/Redist/Debug/x64/AllJoyn.dll',   './ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-dbg/bin/AllJoyn.dll', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-rel/bin/AllJoyn.dll'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/Redist/Retail/x64/AllJoyn.dll',   './ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-rel/bin/AllJoyn.dll', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)

    # x86
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-win8x86-sdk/alljoyn-3.0.1-win8x86-sdk-dbg/bin/AllJoyn.dll'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/Redist/Debug/x86/AllJoyn.dll',   './ExtractedTemp/alljoyn-3.0.1-win8x86-sdk/alljoyn-3.0.1-win8x86-sdk-dbg/bin/AllJoyn.dll', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-win8x86-sdk/alljoyn-3.0.1-win8x86-sdk-rel/bin/AllJoyn.dll'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/Redist/Retail/x86/AllJoyn.dll',   './ExtractedTemp/alljoyn-3.0.1-win8x86-sdk/alljoyn-3.0.1-win8x86-sdk-rel/bin/AllJoyn.dll', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)

    #ARM
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-winrt-sdk/alljoyn-3.0.1-winrt-sdk-dbg/bin/AllJoyn.dll'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/Redist/Debug/ARM/AllJoyn.dll',   './ExtractedTemp/alljoyn-3.0.1-winrt-sdk/alljoyn-3.0.1-winrt-sdk-dbg/bin/AllJoyn.dll', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-winrt-sdk/alljoyn-3.0.1-winrt-sdk-rel/bin/AllJoyn.dll'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/Redist/Retail/ARM/AllJoyn.dll',   './ExtractedTemp/alljoyn-3.0.1-winrt-sdk/alljoyn-3.0.1-winrt-sdk-rel/bin/AllJoyn.dll', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)

    #winmd and .xml
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-rel/bin/AllJoyn.wimd'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/References/CommonConfiguration/neutral/AllJoyn.winmd',   './ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-rel/bin/AllJoyn.winmd', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)
    if os.path.exists('ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-rel/bin/AllJoyn.xml'):
        copybin = vsix_env.Command('AllJoynSDKVSIX/AllJoynSDKVSIX/References/CommonConfiguration/neutral/AllJoyn.xml',   './ExtractedTemp/alljoyn-3.0.1-win8x64-sdk/alljoyn-3.0.1-win8x64-sdk-rel/bin/AllJoyn.xml', Copy('$TARGET','$SOURCE') )
        vsix_env.Depends(makevsix, copybin)


# Install vsix at the same level as the architecture directory
if vsix_env['OS'] == 'win8':
    makevsix_install = vsix_env.Install('$DISTDIR/../../../vsix', source = vsix_env.Glob('AllJoynSDKVSIX\\AllJoynSDKVSIX\\bin\\Release\\*.*'))
    vsix_env.Depends(makevsix_install, makevsix)

    # clean up the extracted files when finished
    delete_extracted = vsix_env.Command('foo.out', None, [Delete(vsix_env.Dir('./ExtractedTemp'), must_exist=1)] )
    vsix_env.Depends(delete_extracted, makevsix_install)

