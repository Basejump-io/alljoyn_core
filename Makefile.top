# Copyright 2012, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 

#
# Example command: make OS=linux CPU=x86 VARIANT=debug

.PHONY: all partial clean distclean

all: distclean alljoyn

CC=gcc
CXX=g++
AR=ar

# Default build configuration
ifeq "$(CPU)" ""
    CPU=x86
endif
ifeq "$(OS)" ""
    OS=linux
endif
ifeq "$(VARIANT)" ""
    VARIANT=debug
endif

ifeq "$(OS)" "linux"
    # Linux specific flags
    CPPDEFINES+=-DQCC_OS_LINUX
    CPPDEFINES+=-DQCC_OS_GROUP_POSIX
    OS_GROUP=posix
else
    $(error $(OS) build is not supported yet.)
endif

CFLAGS=-Wall \
       -Werror=non-virtual-dtor \
       -pipe \
       -std=c99 \
       -fno-strict-aliasing \
       -Wno-long-long

CXXFLAGS=-Wall \
        -Werror=non-virtual-dtor \
        -pipe \
        -std=c++98 \
        -fno-rtti \
        -fno-exceptions \
        -fno-strict-aliasing \
        -Wno-long-long \
        -Wno-deprecated

ifeq "$(CPU)" "x86"
# Force 32-bit builds
    CXXFLAGS+=-m32
    CFLAGS+=-m32
else
    ifeq "$(CPU)" "x86-64"
        CXXFLAGS+=-m64 -fPIC
        CFLAGS+=-m64 -fPIC
    endif
endif

# Debug/Release Variants
ifeq "$(VARIANT)" "debug"
    CFLAGS+=-g
    CXXFLAGS+=-g
    JAVACFLAGS+=-g -Xlint -Xlint:-serial
else
    CFLAGS+=-O3
    CXXFLAGS+=-O3
    LINKFLAGS=-s
    CPPDEFINES+=-DNDEBUG
    JAVACFLAGS=-Xlint -Xlint:-serial
endif

# Header/lib path include
INCLUDE = -I$(PWD)/common/inc -I$(PWD)/alljoyn_core/inc -I$(PWD)/alljoyn_core/src -I$(PWD)/alljoyn_core/daemon

LIBS = -lalljoyn
# Platform specifics system libs
ifeq "$(OS)" "linux"
    LIBS += -lrt -lstdc++ -lpthread -lcrypto
endif

CRYPTO = openssl

INSTALLDIR = $(PWD)/build/$(OS)/$(CPU)/$(VARIANT)
ALLJOYNLIB = $(INSTALLDIR)/dist/lib/liballjoyn.a
COMMONDIR = $(PWD)/common

INCLUDE += -L$(INSTALLDIR)/dist/lib

JUNK=*.o *~
export

alljoyn:
	@mkdir -p $(INSTALLDIR)/dist/lib
	@mkdir -p $(INSTALLDIR)/dist/bin
	@mkdir -p $(INSTALLDIR)/dist/bin/samples
	@mkdir -p $(INSTALLDIR)/dist/inc
	@mkdir -p $(INSTALLDIR)/dist/samples
	cd common; make;
	cd alljoyn_core; make;
	cd alljoyn_js; make;

clean:
	@rm -f $(JUNK)
	cd common; make clean;
	cd alljoyn_core; make clean;
	cd alljoyn_js; make clean;

distclean: clean
	@rm -rf $(INSTALLDIR)/dist/lib
	@rm -rf $(INSTALLDIR)/dist/bin
	@rm -rf $(INSTALLDIR)/dist/inc
	@rm -rf $(INSTALLDIR)/dist/samples

partial: alljoyn

